 @page "/categories"

 @inject IRepository repository
 @inject SweetAlertService sweetAlertService
 @inject NavigationManager navigationManager

<h3>Categorias</h3>

<a class="btn btn-primary mb-3" href="/categories/create">Nuevo Categoria</a>
<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>País</th>
                    <th>Acción</th>
                </tr>
        </thead>
            <tbody>
                    @foreach (var category in Categories!)
                    {
                   <tr>    
                            <td>
                                @category.Name
                            </td>
                            <td>
                            <a href="/categories/edit/@category.Id" class="btn btn-warning">
                                  <span class="glyphicon glyphicon-pencil"></span> Editar 
                                </a>

                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>
                                    <span class="glyphicon glyphicon-trash"></span> Borrar
                                </button>


                            </td>
                        </tr>   
                    }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    public List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Category>>("/api/categories");
        Categories = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Esta seguro que quieres borrar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var reponseHtpp = await repository.Delete($"/api/categories/{id}");
        if (reponseHtpp.Error)
        {
            if (reponseHtpp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await reponseHtpp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error",message,SweetAlertIcon.Error);
                return;
            } 
        }
        await LoadAsync(); // recargo la pagina para que me tome los cambios
    }
}
