@page "/states/details/{StateId:int}"
@using Sales.WEB.Pages.Cities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (state==null)
{
    <div class="spinner"/>
}
else
{
    <h3>Detalles @state!.Name</h3>
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <a class="btn btn-primary" @onclick=@(() => ShowModal(@StateId))>Nueva Ciudad</a>
            <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
        </div>
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
        </div>
    </div>

    <div>
        <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

        <GenericList MyList="cities!">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Ciudad</th>
                            <th style ="width:180px">Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var city in cities!)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a @onclick=@(() => ShowModal(@city.Id, true)) class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CityEdit>(string.Empty, new ModalParameters().Add("StateId", id));
        }
        else
        {
            modalReference = Modal.Show<CityCreate>(string.Empty, new ModalParameters().Add("StateId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/cities?id={StateId}&page={page}";
            url2 = $"/api/cities/totalPages?id={StateId}";
        }
        else
        {
            url1 = $"/api/cities?id={StateId}&page={page}&filter={Filter}";
            url2 = $"/api/cities/totalPages?id={StateId}&filter={Filter}";
        }

        var responseHppt1 = await repository.Get<State>($"/api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt1.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;

    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Esta seguro que quieres borrar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var reponseHtpp = await repository.Delete($"/api/cities/{cityId}");
        if (reponseHtpp.Error)
        {
            if (reponseHtpp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await reponseHtpp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
