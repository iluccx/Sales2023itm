@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (state==null)
{
    <p>Cargando...</p>
}
else
{
    <h3>Detalles @state!.Name</h3>
    <div class="mb-3">
        <a class="btn btn-primary" href="/cities/create/@state.Id">Nueva Ciudad</a>
        <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
    </div>
    <div>
        <GenericList MyList="state.Cities!.ToList()">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Ciudad</th>
                            <th>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var city in state.Cities!.ToList())
                    {
                                <tr>
                                    <td>
                                @city.Name
                                    </td>
                                    <td>
                                        <a href="/cities/edit/@city.Id" class="btn btn-warning">Editar</a>
                                        <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Borrar</button>
                                    </td>
                                </tr>
                    }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
}

@code {
    private State? state;

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Esta seguro que quieres borrar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var reponseHtpp = await repository.Delete($"/api/cities/{cityId}");
        if (reponseHtpp.Error)
        {
            if (reponseHtpp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await reponseHtpp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}
